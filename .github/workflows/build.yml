name: Build Magisk Module Zip

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags, e.g., v1.0.2
  workflow_dispatch:
    inputs:
      version:
        description: 'Versioni i ri i modulës'
        required: false
        default: '1.0.0'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository me historikun e plotë
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Sigurohuni që të keni akses në historikun e plotë të git për të push-uar ndryshimet

      # 2. Vendosja e variablit të versionit
      - name: Set version environment variable
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}  # Heq prefiksin refs/tags/ nga tag-u
            VERSION=${VERSION#v}  # Heq 'v' nga fillimi
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      # 3. Shfaq versionin për verifikim
      - name: Display Version
        run: echo "Building version ${{ env.VERSION }}"

      # 4. List Repository Files për diagnostikë
      - name: List Repository Files
        run: |
          echo "Listing all files in the repository root:"
          ls -R

      # 5. Përditëso module.prop me versionin e ri
      - name: Update module.prop
        run: |
          MODULE_PROP_PATH="./module.prop"  # Rruga e saktë për module.prop në rrënjë
          if [ -f "$MODULE_PROP_PATH" ]; then
            sed -i "s/^version=.*/version=${{ env.VERSION }}/" "$MODULE_PROP_PATH"
            echo "Updated module.prop to version ${{ env.VERSION }}"
          else
            echo "module.prop not found at $MODULE_PROP_PATH"
            exit 1
          fi

      # 6. Instaloni jq në rast se nuk është i disponueshëm
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 7. Përditëso update.json me versionin e ri dhe URL-në
      - name: Update update.json
        run: |
          UPDATE_JSON_PATH="./update.json"  # Rruga e saktë për update.json në rrënjë
          if [ -f "$UPDATE_JSON_PATH" ]; then
            REPO_URL="https://github.com/${{ github.repository }}"
            ZIP_NAME="Odex_app_${{ env.VERSION }}.zip"
            RELEASE_URL="${REPO_URL}/releases/download/v${{ env.VERSION }}/${ZIP_NAME}"
            jq --arg ver "${{ env.VERSION }}" --arg url "${RELEASE_URL }}" '.version = $ver | .url = $url' "$UPDATE_JSON_PATH" > tmp.json
            mv tmp.json "$UPDATE_JSON_PATH"
            echo "Updated update.json to version ${{ env.VERSION }} and url $RELEASE_URL"
          else
            echo "update.json not found at $UPDATE_JSON_PATH"
            exit 1
          fi

      # 8. Shfaq ndryshimet në git (Opsionale)
      - name: Show Git Diff
        run: git diff

      # 9. Krijo skedarin ZIP me emër versioni
      - name: Create zip archive
        run: |
          ZIP_NAME="Odex_app_${{ env.VERSION }}.zip"
          echo "Creating ZIP: $ZIP_NAME"
          zip -r $ZIP_NAME ./* -x '.git/*' '.github/*'
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      # 10. Krijo Release dhe Ngarko ZIP-in
      - name: Create Release and Upload Zip
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          files: |
            Odex_app_${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 11. Kontrollo Statusin e Ngarkimit
      - name: Check Upload Status
        run: |
          echo "Verifikoni nëse ZIP u ngarkua me sukses në release."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.VERSION }}
