name: Build Magisk Module Zip

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags, e.g., v1.0.2
  workflow_dispatch:
    inputs:
      version:
        description: 'Versioni i ri i modulës'
        required: false
        default: '1.0.0'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository me historikun e plotë
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Sigurohuni që të keni akses në historikun e plotë të git për të push-uar ndryshimet

      # 2. Vendosja e variablit të versionit
      - name: Set version environment variable
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/}  # Heq prefiksin refs/tags/ nga tag-u
            VERSION=${VERSION#v}  # Heq 'v' nga fillimi
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      # 3. Shfaq versionin për verifikim
      - name: Display Version
        run: echo "Building version ${{ env.VERSION }}"

      # 4. Krijo skedarin ZIP me emër versioni
      - name: Create zip archive
        run: |
          ZIP_NAME="Odex_app_${{ env.VERSION }}.zip"
          echo "Creating ZIP: $ZIP_NAME"
          zip -r $ZIP_NAME ./* -x '.git/*' '.github/*'
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      # 5. Listo skedarët për verifikim
      - name: List Files After Zip Creation
        run: |
          echo "Listing files after creating the zip and update.json:"
          ls -la

      # 6. Përditësoj update.json me versionin e ri
      - name: Përditësoj update.json me versionin e ri
        run: |
          node -e "
            const fs = require('fs');
            const path = 'update.json'; // Ndrysho rrugën nëse është ndryshe
            const version = process.env.VERSION;
            let data = {};
            if (fs.existsSync(path)) {
              data = JSON.parse(fs.readFileSync(path, 'utf8'));
            }
            data.version = version;
            fs.writeFileSync(path, JSON.stringify(data, null, 2));
          "
        env:
          VERSION: ${{ env.VERSION }}

      # 7. Përditësoj module.prop me versionin e ri
      - name: Përditësoj module.prop me versionin e ri
        run: |
          MODULE_PROP_PATH="module.prop"  # Ndrysho nëse është në një rrugë tjetër
          if [ -f "$MODULE_PROP_PATH" ]; then
            echo "Updating version in $MODULE_PROP_PATH to ${{ env.VERSION }}"
            # Kërkon që versioni të jetë në formatin version=1.0.0
            sed -i "s/^version=.*/version=${{ env.VERSION }}/" $MODULE_PROP_PATH
          else
            echo "Error: $MODULE_PROP_PATH nuk u gjet."
            exit 1
          fi

      # 8. Commit dhe push ndryshimet në update.json dhe module.prop
      - name: Commit dhe push ndryshimet
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Përditësoj update.json dhe module.prop me versionin ${{ env.VERSION }}"
          branch: main  # Sigurohu që kjo është dega e duhur
          file_pattern: |
            update.json
            module.prop
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # 9. Krijo Release dhe Ngarko ZIP-in
      - name: Create Release and Upload Zip
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          files: |
            Odex_app_${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 10. Kontrollo Statusin e Ngarkimit
      - name: Check Upload Status
        run: |
          echo "Verifikoni nëse ZIP u ngarkua me sukses në release."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.VERSION }}
