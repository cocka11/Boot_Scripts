name: Build Magisk Module Zip

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags, e.g., v1.0.2
  workflow_dispatch:
    inputs:
      version:
        description: 'Versioni i ri i modulës'
        required: false
        default: '1.0.0'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository me historikun e plotë
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Sigurohuni që të keni akses në historikun e plotë të git për të push-uar ndryshimet

      # 2. Vendosja e variablit të versionit
      - name: Set version environment variable
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${{ github.event.inputs.version || github.ref }}
            VERSION=${VERSION#refs/tags/}  # Heq prefiksin refs/tags/ nga tag-u
            VERSION=${VERSION#v}  # Heq 'v' nga fillimi
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      # 3. Shfaq versionin për verifikim
      - name: Display Version
        run: echo "Building version ${{ env.VERSION }}"

      # 4. Përditëso `update.json`
      - name: Update update.json
        run: |
          echo "Updating update.json..."
          echo "{ \"version\": \"${{ env.VERSION }}\", \"name\": \"Odex_app\", \"description\": \"Moduli për azhurnimin automatik të Magisk\", \"zipUrl\": \"https://github.com/cocka11/Odex_app/releases/download/v${{ env.VERSION }}/Odex_app_${{ env.VERSION }}.zip\" }" > update.json
          cat update.json

      # 5. Shfaq ndryshimet në `update.json` për debugging
      - name: Show Changes to update.json
        run: |
          echo "Showing changes to update.json:"
          git diff update.json

      # 6. Kontrollo nëse `update.json` ka ndryshime
      - name: Check if update.json has changes
        id: check_changes
        run: |
          git diff --exit-code update.json
        continue-on-error: true

      # 7. Commit dhe Push `update.json` në repository nëse ka ndryshime
      - name: Commit and Push update.json
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && steps.check_changes.outcome != 'success'
        run: |
          echo "Committing and pushing update.json..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add update.json
          git commit -m "Update update.json to version v${{ env.VERSION }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8. Krijo skedarin ZIP me emër versioni
      - name: Create zip archive
        run: |
          ZIP_NAME="Odex_app_${{ env.VERSION }}.zip"
          echo "Creating ZIP: $ZIP_NAME"
          zip -r $ZIP_NAME ./* -x '.git/*' '.github/*'
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      # 9. Listo skedarët për verifikim
      - name: List Files After Zip Creation
        run: |
          echo "Listing files after creating the zip and update.json:"
          ls -la

      # 10. Krijo Release dhe Ngarko ZIP-in
      - name: Create Release and Upload Zip
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          files: |
            Odex_app_${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 11. Kontrollo Statusin e Ngarkimit
      - name: Check Upload Status
        run: |
          echo "Verifikoni nëse ZIP u ngarkua me sukses në release."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.VERSION }}
